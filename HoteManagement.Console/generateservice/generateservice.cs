//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

  public virtual void Addd_qyjjlx(d_qyjjlxDto d_qyjjlx)
  {
      Domain.d_qyjjlx model = AutoMapper.Mapper.Map<Domain.d_qyjjlx>(d_qyjjlx);
      _d_qyjjlxRepository.Insert(model);
  }
   public virtual void Updated_qyjjlx(d_qyjjlxDto d_qyjjlx)
  {
      Domain.d_qyjjlx model = AutoMapper.Mapper.Map<Domain.d_qyjjlx>(d_qyjjlx);
      _d_qyjjlxRepository.Update(model);
  }

     public virtual d_qyjjlxDto Getd_qyjjlxById(int id)
	  {
	      return _d_qyjjlxRepository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<d_qyjjlxDto>();
	    }

		  public virtual List<d_qyjjlxDto> Getd_qyjjlxList(int? hotelid)
	  {
	    var result = _d_qyjjlxRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<d_qyjjlxDto>();
	    }

	  public virtual IPagedList<d_qyjjlxDto> Getd_qyjjlxList(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _d_qyjjlxRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<d_qyjjlxDto>(result.ProjectToQueryable<d_qyjjlxDto>(), pageindex, pagesize);
	    }

	   public virtual void Deleted_qyjjlx(int id)
	    {
		 _d_qyjjlxRepository.Delete(id);
		   }

  public virtual void Addg_BusinessLog(g_BusinessLogDto g_BusinessLog)
  {
      Domain.g_BusinessLog model = AutoMapper.Mapper.Map<Domain.g_BusinessLog>(g_BusinessLog);
      _g_BusinessLogRepository.Insert(model);
  }
   public virtual void Updateg_BusinessLog(g_BusinessLogDto g_BusinessLog)
  {
      Domain.g_BusinessLog model = AutoMapper.Mapper.Map<Domain.g_BusinessLog>(g_BusinessLog);
      _g_BusinessLogRepository.Update(model);
  }

     public virtual g_BusinessLogDto Getg_BusinessLogById(int id)
	  {
	      return _g_BusinessLogRepository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<g_BusinessLogDto>();
	    }

		  public virtual List<g_BusinessLogDto> Getg_BusinessLogList(int? hotelid)
	  {
	    var result = _g_BusinessLogRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<g_BusinessLogDto>();
	    }

	  public virtual IPagedList<g_BusinessLogDto> Getg_BusinessLogList(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _g_BusinessLogRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<g_BusinessLogDto>(result.ProjectToQueryable<g_BusinessLogDto>(), pageindex, pagesize);
	    }

	   public virtual void Deleteg_BusinessLog(int id)
	    {
		 _g_BusinessLogRepository.Delete(id);
		   }

  public virtual void Addg_statetransferrule(g_statetransferruleDto g_statetransferrule)
  {
      Domain.g_statetransferrule model = AutoMapper.Mapper.Map<Domain.g_statetransferrule>(g_statetransferrule);
      _g_statetransferruleRepository.Insert(model);
  }
   public virtual void Updateg_statetransferrule(g_statetransferruleDto g_statetransferrule)
  {
      Domain.g_statetransferrule model = AutoMapper.Mapper.Map<Domain.g_statetransferrule>(g_statetransferrule);
      _g_statetransferruleRepository.Update(model);
  }

     public virtual g_statetransferruleDto Getg_statetransferruleById(int id)
	  {
	      return _g_statetransferruleRepository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<g_statetransferruleDto>();
	    }

		  public virtual List<g_statetransferruleDto> Getg_statetransferruleList(int? hotelid)
	  {
	    var result = _g_statetransferruleRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<g_statetransferruleDto>();
	    }

	  public virtual IPagedList<g_statetransferruleDto> Getg_statetransferruleList(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _g_statetransferruleRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<g_statetransferruleDto>(result.ProjectToQueryable<g_statetransferruleDto>(), pageindex, pagesize);
	    }

	   public virtual void Deleteg_statetransferrule(int id)
	    {
		 _g_statetransferruleRepository.Delete(id);
		   }

  public virtual void Addgczj_code(gczj_codeDto gczj_code)
  {
      Domain.gczj_code model = AutoMapper.Mapper.Map<Domain.gczj_code>(gczj_code);
      _gczj_codeRepository.Insert(model);
  }
   public virtual void Updategczj_code(gczj_codeDto gczj_code)
  {
      Domain.gczj_code model = AutoMapper.Mapper.Map<Domain.gczj_code>(gczj_code);
      _gczj_codeRepository.Update(model);
  }

     public virtual gczj_codeDto Getgczj_codeById(int id)
	  {
	      return _gczj_codeRepository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<gczj_codeDto>();
	    }

		  public virtual List<gczj_codeDto> Getgczj_codeList(int? hotelid)
	  {
	    var result = _gczj_codeRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<gczj_codeDto>();
	    }

	  public virtual IPagedList<gczj_codeDto> Getgczj_codeList(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _gczj_codeRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<gczj_codeDto>(result.ProjectToQueryable<gczj_codeDto>(), pageindex, pagesize);
	    }

	   public virtual void Deletegczj_code(int id)
	    {
		 _gczj_codeRepository.Delete(id);
		   }

  public virtual void Addgczj_glyh_dq(gczj_glyh_dqDto gczj_glyh_dq)
  {
      Domain.gczj_glyh_dq model = AutoMapper.Mapper.Map<Domain.gczj_glyh_dq>(gczj_glyh_dq);
      _gczj_glyh_dqRepository.Insert(model);
  }
   public virtual void Updategczj_glyh_dq(gczj_glyh_dqDto gczj_glyh_dq)
  {
      Domain.gczj_glyh_dq model = AutoMapper.Mapper.Map<Domain.gczj_glyh_dq>(gczj_glyh_dq);
      _gczj_glyh_dqRepository.Update(model);
  }

     public virtual gczj_glyh_dqDto Getgczj_glyh_dqById(int id)
	  {
	      return _gczj_glyh_dqRepository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<gczj_glyh_dqDto>();
	    }

		  public virtual List<gczj_glyh_dqDto> Getgczj_glyh_dqList(int? hotelid)
	  {
	    var result = _gczj_glyh_dqRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<gczj_glyh_dqDto>();
	    }

	  public virtual IPagedList<gczj_glyh_dqDto> Getgczj_glyh_dqList(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _gczj_glyh_dqRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<gczj_glyh_dqDto>(result.ProjectToQueryable<gczj_glyh_dqDto>(), pageindex, pagesize);
	    }

	   public virtual void Deletegczj_glyh_dq(int id)
	    {
		 _gczj_glyh_dqRepository.Delete(id);
		   }

  public virtual void Addgczj_jgjs_dwgcxxb(gczj_jgjs_dwgcxxbDto gczj_jgjs_dwgcxxb)
  {
      Domain.gczj_jgjs_dwgcxxb model = AutoMapper.Mapper.Map<Domain.gczj_jgjs_dwgcxxb>(gczj_jgjs_dwgcxxb);
      _gczj_jgjs_dwgcxxbRepository.Insert(model);
  }
   public virtual void Updategczj_jgjs_dwgcxxb(gczj_jgjs_dwgcxxbDto gczj_jgjs_dwgcxxb)
  {
      Domain.gczj_jgjs_dwgcxxb model = AutoMapper.Mapper.Map<Domain.gczj_jgjs_dwgcxxb>(gczj_jgjs_dwgcxxb);
      _gczj_jgjs_dwgcxxbRepository.Update(model);
  }

     public virtual gczj_jgjs_dwgcxxbDto Getgczj_jgjs_dwgcxxbById(int id)
	  {
	      return _gczj_jgjs_dwgcxxbRepository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<gczj_jgjs_dwgcxxbDto>();
	    }

		  public virtual List<gczj_jgjs_dwgcxxbDto> Getgczj_jgjs_dwgcxxbList(int? hotelid)
	  {
	    var result = _gczj_jgjs_dwgcxxbRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<gczj_jgjs_dwgcxxbDto>();
	    }

	  public virtual IPagedList<gczj_jgjs_dwgcxxbDto> Getgczj_jgjs_dwgcxxbList(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _gczj_jgjs_dwgcxxbRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<gczj_jgjs_dwgcxxbDto>(result.ProjectToQueryable<gczj_jgjs_dwgcxxbDto>(), pageindex, pagesize);
	    }

	   public virtual void Deletegczj_jgjs_dwgcxxb(int id)
	    {
		 _gczj_jgjs_dwgcxxbRepository.Delete(id);
		   }

  public virtual void Addgczj_jgjsglb(gczj_jgjsglbDto gczj_jgjsglb)
  {
      Domain.gczj_jgjsglb model = AutoMapper.Mapper.Map<Domain.gczj_jgjsglb>(gczj_jgjsglb);
      _gczj_jgjsglbRepository.Insert(model);
  }
   public virtual void Updategczj_jgjsglb(gczj_jgjsglbDto gczj_jgjsglb)
  {
      Domain.gczj_jgjsglb model = AutoMapper.Mapper.Map<Domain.gczj_jgjsglb>(gczj_jgjsglb);
      _gczj_jgjsglbRepository.Update(model);
  }

     public virtual gczj_jgjsglbDto Getgczj_jgjsglbById(int id)
	  {
	      return _gczj_jgjsglbRepository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<gczj_jgjsglbDto>();
	    }

		  public virtual List<gczj_jgjsglbDto> Getgczj_jgjsglbList(int? hotelid)
	  {
	    var result = _gczj_jgjsglbRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<gczj_jgjsglbDto>();
	    }

	  public virtual IPagedList<gczj_jgjsglbDto> Getgczj_jgjsglbList(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _gczj_jgjsglbRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<gczj_jgjsglbDto>(result.ProjectToQueryable<gczj_jgjsglbDto>(), pageindex, pagesize);
	    }

	   public virtual void Deletegczj_jgjsglb(int id)
	    {
		 _gczj_jgjsglbRepository.Delete(id);
		   }

  public virtual void Addgczj_jjscglb(gczj_jjscglbDto gczj_jjscglb)
  {
      Domain.gczj_jjscglb model = AutoMapper.Mapper.Map<Domain.gczj_jjscglb>(gczj_jjscglb);
      _gczj_jjscglbRepository.Insert(model);
  }
   public virtual void Updategczj_jjscglb(gczj_jjscglbDto gczj_jjscglb)
  {
      Domain.gczj_jjscglb model = AutoMapper.Mapper.Map<Domain.gczj_jjscglb>(gczj_jjscglb);
      _gczj_jjscglbRepository.Update(model);
  }

     public virtual gczj_jjscglbDto Getgczj_jjscglbById(int id)
	  {
	      return _gczj_jjscglbRepository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<gczj_jjscglbDto>();
	    }

		  public virtual List<gczj_jjscglbDto> Getgczj_jjscglbList(int? hotelid)
	  {
	    var result = _gczj_jjscglbRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<gczj_jjscglbDto>();
	    }

	  public virtual IPagedList<gczj_jjscglbDto> Getgczj_jjscglbList(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _gczj_jjscglbRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<gczj_jjscglbDto>(result.ProjectToQueryable<gczj_jjscglbDto>(), pageindex, pagesize);
	    }

	   public virtual void Deletegczj_jjscglb(int id)
	    {
		 _gczj_jjscglbRepository.Delete(id);
		   }

  public virtual void Addgczj_sgcsfhdglb(gczj_sgcsfhdglbDto gczj_sgcsfhdglb)
  {
      Domain.gczj_sgcsfhdglb model = AutoMapper.Mapper.Map<Domain.gczj_sgcsfhdglb>(gczj_sgcsfhdglb);
      _gczj_sgcsfhdglbRepository.Insert(model);
  }
   public virtual void Updategczj_sgcsfhdglb(gczj_sgcsfhdglbDto gczj_sgcsfhdglb)
  {
      Domain.gczj_sgcsfhdglb model = AutoMapper.Mapper.Map<Domain.gczj_sgcsfhdglb>(gczj_sgcsfhdglb);
      _gczj_sgcsfhdglbRepository.Update(model);
  }

     public virtual gczj_sgcsfhdglbDto Getgczj_sgcsfhdglbById(int id)
	  {
	      return _gczj_sgcsfhdglbRepository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<gczj_sgcsfhdglbDto>();
	    }

		  public virtual List<gczj_sgcsfhdglbDto> Getgczj_sgcsfhdglbList(int? hotelid)
	  {
	    var result = _gczj_sgcsfhdglbRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<gczj_sgcsfhdglbDto>();
	    }

	  public virtual IPagedList<gczj_sgcsfhdglbDto> Getgczj_sgcsfhdglbList(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _gczj_sgcsfhdglbRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<gczj_sgcsfhdglbDto>(result.ProjectToQueryable<gczj_sgcsfhdglbDto>(), pageindex, pagesize);
	    }

	   public virtual void Deletegczj_sgcsfhdglb(int id)
	    {
		 _gczj_sgcsfhdglbRepository.Delete(id);
		   }

  public virtual void Addgczj_xmxx(gczj_xmxxDto gczj_xmxx)
  {
      Domain.gczj_xmxx model = AutoMapper.Mapper.Map<Domain.gczj_xmxx>(gczj_xmxx);
      _gczj_xmxxRepository.Insert(model);
  }
   public virtual void Updategczj_xmxx(gczj_xmxxDto gczj_xmxx)
  {
      Domain.gczj_xmxx model = AutoMapper.Mapper.Map<Domain.gczj_xmxx>(gczj_xmxx);
      _gczj_xmxxRepository.Update(model);
  }

     public virtual gczj_xmxxDto Getgczj_xmxxById(int id)
	  {
	      return _gczj_xmxxRepository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<gczj_xmxxDto>();
	    }

		  public virtual List<gczj_xmxxDto> Getgczj_xmxxList(int? hotelid)
	  {
	    var result = _gczj_xmxxRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<gczj_xmxxDto>();
	    }

	  public virtual IPagedList<gczj_xmxxDto> Getgczj_xmxxList(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _gczj_xmxxRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<gczj_xmxxDto>(result.ProjectToQueryable<gczj_xmxxDto>(), pageindex, pagesize);
	    }

	   public virtual void Deletegczj_xmxx(int id)
	    {
		 _gczj_xmxxRepository.Delete(id);
		   }

  public virtual void Addgczj_zbkzjba_xmz(gczj_zbkzjba_xmzDto gczj_zbkzjba_xmz)
  {
      Domain.gczj_zbkzjba_xmz model = AutoMapper.Mapper.Map<Domain.gczj_zbkzjba_xmz>(gczj_zbkzjba_xmz);
      _gczj_zbkzjba_xmzRepository.Insert(model);
  }
   public virtual void Updategczj_zbkzjba_xmz(gczj_zbkzjba_xmzDto gczj_zbkzjba_xmz)
  {
      Domain.gczj_zbkzjba_xmz model = AutoMapper.Mapper.Map<Domain.gczj_zbkzjba_xmz>(gczj_zbkzjba_xmz);
      _gczj_zbkzjba_xmzRepository.Update(model);
  }

     public virtual gczj_zbkzjba_xmzDto Getgczj_zbkzjba_xmzById(int id)
	  {
	      return _gczj_zbkzjba_xmzRepository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<gczj_zbkzjba_xmzDto>();
	    }

		  public virtual List<gczj_zbkzjba_xmzDto> Getgczj_zbkzjba_xmzList(int? hotelid)
	  {
	    var result = _gczj_zbkzjba_xmzRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<gczj_zbkzjba_xmzDto>();
	    }

	  public virtual IPagedList<gczj_zbkzjba_xmzDto> Getgczj_zbkzjba_xmzList(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _gczj_zbkzjba_xmzRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<gczj_zbkzjba_xmzDto>(result.ProjectToQueryable<gczj_zbkzjba_xmzDto>(), pageindex, pagesize);
	    }

	   public virtual void Deletegczj_zbkzjba_xmz(int id)
	    {
		 _gczj_zbkzjba_xmzRepository.Delete(id);
		   }

  public virtual void Addgczj_zbkzjbaglb(gczj_zbkzjbaglbDto gczj_zbkzjbaglb)
  {
      Domain.gczj_zbkzjbaglb model = AutoMapper.Mapper.Map<Domain.gczj_zbkzjbaglb>(gczj_zbkzjbaglb);
      _gczj_zbkzjbaglbRepository.Insert(model);
  }
   public virtual void Updategczj_zbkzjbaglb(gczj_zbkzjbaglbDto gczj_zbkzjbaglb)
  {
      Domain.gczj_zbkzjbaglb model = AutoMapper.Mapper.Map<Domain.gczj_zbkzjbaglb>(gczj_zbkzjbaglb);
      _gczj_zbkzjbaglbRepository.Update(model);
  }

     public virtual gczj_zbkzjbaglbDto Getgczj_zbkzjbaglbById(int id)
	  {
	      return _gczj_zbkzjbaglbRepository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<gczj_zbkzjbaglbDto>();
	    }

		  public virtual List<gczj_zbkzjbaglbDto> Getgczj_zbkzjbaglbList(int? hotelid)
	  {
	    var result = _gczj_zbkzjbaglbRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<gczj_zbkzjbaglbDto>();
	    }

	  public virtual IPagedList<gczj_zbkzjbaglbDto> Getgczj_zbkzjbaglbList(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _gczj_zbkzjbaglbRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<gczj_zbkzjbaglbDto>(result.ProjectToQueryable<gczj_zbkzjbaglbDto>(), pageindex, pagesize);
	    }

	   public virtual void Deletegczj_zbkzjbaglb(int id)
	    {
		 _gczj_zbkzjbaglbRepository.Delete(id);
		   }

  public virtual void Addgczj_zbkzjbaglb_20140709(gczj_zbkzjbaglb_20140709Dto gczj_zbkzjbaglb_20140709)
  {
      Domain.gczj_zbkzjbaglb_20140709 model = AutoMapper.Mapper.Map<Domain.gczj_zbkzjbaglb_20140709>(gczj_zbkzjbaglb_20140709);
      _gczj_zbkzjbaglb_20140709Repository.Insert(model);
  }
   public virtual void Updategczj_zbkzjbaglb_20140709(gczj_zbkzjbaglb_20140709Dto gczj_zbkzjbaglb_20140709)
  {
      Domain.gczj_zbkzjbaglb_20140709 model = AutoMapper.Mapper.Map<Domain.gczj_zbkzjbaglb_20140709>(gczj_zbkzjbaglb_20140709);
      _gczj_zbkzjbaglb_20140709Repository.Update(model);
  }

     public virtual gczj_zbkzjbaglb_20140709Dto Getgczj_zbkzjbaglb_20140709ById(int id)
	  {
	      return _gczj_zbkzjbaglb_20140709Repository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<gczj_zbkzjbaglb_20140709Dto>();
	    }

		  public virtual List<gczj_zbkzjbaglb_20140709Dto> Getgczj_zbkzjbaglb_20140709List(int? hotelid)
	  {
	    var result = _gczj_zbkzjbaglb_20140709Repository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<gczj_zbkzjbaglb_20140709Dto>();
	    }

	  public virtual IPagedList<gczj_zbkzjbaglb_20140709Dto> Getgczj_zbkzjbaglb_20140709List(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _gczj_zbkzjbaglb_20140709Repository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<gczj_zbkzjbaglb_20140709Dto>(result.ProjectToQueryable<gczj_zbkzjbaglb_20140709Dto>(), pageindex, pagesize);
	    }

	   public virtual void Deletegczj_zbkzjbaglb_20140709(int id)
	    {
		 _gczj_zbkzjbaglb_20140709Repository.Delete(id);
		   }

  public virtual void Addgczj_zbkzjbaglb_20150610(gczj_zbkzjbaglb_20150610Dto gczj_zbkzjbaglb_20150610)
  {
      Domain.gczj_zbkzjbaglb_20150610 model = AutoMapper.Mapper.Map<Domain.gczj_zbkzjbaglb_20150610>(gczj_zbkzjbaglb_20150610);
      _gczj_zbkzjbaglb_20150610Repository.Insert(model);
  }
   public virtual void Updategczj_zbkzjbaglb_20150610(gczj_zbkzjbaglb_20150610Dto gczj_zbkzjbaglb_20150610)
  {
      Domain.gczj_zbkzjbaglb_20150610 model = AutoMapper.Mapper.Map<Domain.gczj_zbkzjbaglb_20150610>(gczj_zbkzjbaglb_20150610);
      _gczj_zbkzjbaglb_20150610Repository.Update(model);
  }

     public virtual gczj_zbkzjbaglb_20150610Dto Getgczj_zbkzjbaglb_20150610ById(int id)
	  {
	      return _gczj_zbkzjbaglb_20150610Repository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<gczj_zbkzjbaglb_20150610Dto>();
	    }

		  public virtual List<gczj_zbkzjbaglb_20150610Dto> Getgczj_zbkzjbaglb_20150610List(int? hotelid)
	  {
	    var result = _gczj_zbkzjbaglb_20150610Repository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<gczj_zbkzjbaglb_20150610Dto>();
	    }

	  public virtual IPagedList<gczj_zbkzjbaglb_20150610Dto> Getgczj_zbkzjbaglb_20150610List(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _gczj_zbkzjbaglb_20150610Repository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<gczj_zbkzjbaglb_20150610Dto>(result.ProjectToQueryable<gczj_zbkzjbaglb_20150610Dto>(), pageindex, pagesize);
	    }

	   public virtual void Deletegczj_zbkzjbaglb_20150610(int id)
	    {
		 _gczj_zbkzjbaglb_20150610Repository.Delete(id);
		   }

  public virtual void Addjsdw_jbqkb(jsdw_jbqkbDto jsdw_jbqkb)
  {
      Domain.jsdw_jbqkb model = AutoMapper.Mapper.Map<Domain.jsdw_jbqkb>(jsdw_jbqkb);
      _jsdw_jbqkbRepository.Insert(model);
  }
   public virtual void Updatejsdw_jbqkb(jsdw_jbqkbDto jsdw_jbqkb)
  {
      Domain.jsdw_jbqkb model = AutoMapper.Mapper.Map<Domain.jsdw_jbqkb>(jsdw_jbqkb);
      _jsdw_jbqkbRepository.Update(model);
  }

     public virtual jsdw_jbqkbDto Getjsdw_jbqkbById(int id)
	  {
	      return _jsdw_jbqkbRepository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<jsdw_jbqkbDto>();
	    }

		  public virtual List<jsdw_jbqkbDto> Getjsdw_jbqkbList(int? hotelid)
	  {
	    var result = _jsdw_jbqkbRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<jsdw_jbqkbDto>();
	    }

	  public virtual IPagedList<jsdw_jbqkbDto> Getjsdw_jbqkbList(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _jsdw_jbqkbRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<jsdw_jbqkbDto>(result.ProjectToQueryable<jsdw_jbqkbDto>(), pageindex, pagesize);
	    }

	   public virtual void Deletejsdw_jbqkb(int id)
	    {
		 _jsdw_jbqkbRepository.Delete(id);
		   }

  public virtual void Addorg_business(org_businessDto org_business)
  {
      Domain.org_business model = AutoMapper.Mapper.Map<Domain.org_business>(org_business);
      _org_businessRepository.Insert(model);
  }
   public virtual void Updateorg_business(org_businessDto org_business)
  {
      Domain.org_business model = AutoMapper.Mapper.Map<Domain.org_business>(org_business);
      _org_businessRepository.Update(model);
  }

     public virtual org_businessDto Getorg_businessById(int id)
	  {
	      return _org_businessRepository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<org_businessDto>();
	    }

		  public virtual List<org_businessDto> Getorg_businessList(int? hotelid)
	  {
	    var result = _org_businessRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<org_businessDto>();
	    }

	  public virtual IPagedList<org_businessDto> Getorg_businessList(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _org_businessRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<org_businessDto>(result.ProjectToQueryable<org_businessDto>(), pageindex, pagesize);
	    }

	   public virtual void Deleteorg_business(int id)
	    {
		 _org_businessRepository.Delete(id);
		   }

  public virtual void Addsgtyk_gljsryqkb(sgtyk_gljsryqkbDto sgtyk_gljsryqkb)
  {
      Domain.sgtyk_gljsryqkb model = AutoMapper.Mapper.Map<Domain.sgtyk_gljsryqkb>(sgtyk_gljsryqkb);
      _sgtyk_gljsryqkbRepository.Insert(model);
  }
   public virtual void Updatesgtyk_gljsryqkb(sgtyk_gljsryqkbDto sgtyk_gljsryqkb)
  {
      Domain.sgtyk_gljsryqkb model = AutoMapper.Mapper.Map<Domain.sgtyk_gljsryqkb>(sgtyk_gljsryqkb);
      _sgtyk_gljsryqkbRepository.Update(model);
  }

     public virtual sgtyk_gljsryqkbDto Getsgtyk_gljsryqkbById(int id)
	  {
	      return _sgtyk_gljsryqkbRepository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<sgtyk_gljsryqkbDto>();
	    }

		  public virtual List<sgtyk_gljsryqkbDto> Getsgtyk_gljsryqkbList(int? hotelid)
	  {
	    var result = _sgtyk_gljsryqkbRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<sgtyk_gljsryqkbDto>();
	    }

	  public virtual IPagedList<sgtyk_gljsryqkbDto> Getsgtyk_gljsryqkbList(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _sgtyk_gljsryqkbRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<sgtyk_gljsryqkbDto>(result.ProjectToQueryable<sgtyk_gljsryqkbDto>(), pageindex, pagesize);
	    }

	   public virtual void Deletesgtyk_gljsryqkb(int id)
	    {
		 _sgtyk_gljsryqkbRepository.Delete(id);
		   }

  public virtual void Addsgtyk_qyjbqkb(sgtyk_qyjbqkbDto sgtyk_qyjbqkb)
  {
      Domain.sgtyk_qyjbqkb model = AutoMapper.Mapper.Map<Domain.sgtyk_qyjbqkb>(sgtyk_qyjbqkb);
      _sgtyk_qyjbqkbRepository.Insert(model);
  }
   public virtual void Updatesgtyk_qyjbqkb(sgtyk_qyjbqkbDto sgtyk_qyjbqkb)
  {
      Domain.sgtyk_qyjbqkb model = AutoMapper.Mapper.Map<Domain.sgtyk_qyjbqkb>(sgtyk_qyjbqkb);
      _sgtyk_qyjbqkbRepository.Update(model);
  }

     public virtual sgtyk_qyjbqkbDto Getsgtyk_qyjbqkbById(int id)
	  {
	      return _sgtyk_qyjbqkbRepository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<sgtyk_qyjbqkbDto>();
	    }

		  public virtual List<sgtyk_qyjbqkbDto> Getsgtyk_qyjbqkbList(int? hotelid)
	  {
	    var result = _sgtyk_qyjbqkbRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<sgtyk_qyjbqkbDto>();
	    }

	  public virtual IPagedList<sgtyk_qyjbqkbDto> Getsgtyk_qyjbqkbList(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _sgtyk_qyjbqkbRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<sgtyk_qyjbqkbDto>(result.ProjectToQueryable<sgtyk_qyjbqkbDto>(), pageindex, pagesize);
	    }

	   public virtual void Deletesgtyk_qyjbqkb(int id)
	    {
		 _sgtyk_qyjbqkbRepository.Delete(id);
		   }

  public virtual void AddUEPP_Code(UEPP_CodeDto UEPP_Code)
  {
      Domain.UEPP_Code model = AutoMapper.Mapper.Map<Domain.UEPP_Code>(UEPP_Code);
      _UEPP_CodeRepository.Insert(model);
  }
   public virtual void UpdateUEPP_Code(UEPP_CodeDto UEPP_Code)
  {
      Domain.UEPP_Code model = AutoMapper.Mapper.Map<Domain.UEPP_Code>(UEPP_Code);
      _UEPP_CodeRepository.Update(model);
  }

     public virtual UEPP_CodeDto GetUEPP_CodeById(int id)
	  {
	      return _UEPP_CodeRepository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<UEPP_CodeDto>();
	    }

		  public virtual List<UEPP_CodeDto> GetUEPP_CodeList(int? hotelid)
	  {
	    var result = _UEPP_CodeRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<UEPP_CodeDto>();
	    }

	  public virtual IPagedList<UEPP_CodeDto> GetUEPP_CodeList(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _UEPP_CodeRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<UEPP_CodeDto>(result.ProjectToQueryable<UEPP_CodeDto>(), pageindex, pagesize);
	    }

	   public virtual void DeleteUEPP_Code(int id)
	    {
		 _UEPP_CodeRepository.Delete(id);
		   }

  public virtual void AddUEPP_Qycsyw(UEPP_QycsywDto UEPP_Qycsyw)
  {
      Domain.UEPP_Qycsyw model = AutoMapper.Mapper.Map<Domain.UEPP_Qycsyw>(UEPP_Qycsyw);
      _UEPP_QycsywRepository.Insert(model);
  }
   public virtual void UpdateUEPP_Qycsyw(UEPP_QycsywDto UEPP_Qycsyw)
  {
      Domain.UEPP_Qycsyw model = AutoMapper.Mapper.Map<Domain.UEPP_Qycsyw>(UEPP_Qycsyw);
      _UEPP_QycsywRepository.Update(model);
  }

     public virtual UEPP_QycsywDto GetUEPP_QycsywById(int id)
	  {
	      return _UEPP_QycsywRepository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<UEPP_QycsywDto>();
	    }

		  public virtual List<UEPP_QycsywDto> GetUEPP_QycsywList(int? hotelid)
	  {
	    var result = _UEPP_QycsywRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<UEPP_QycsywDto>();
	    }

	  public virtual IPagedList<UEPP_QycsywDto> GetUEPP_QycsywList(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _UEPP_QycsywRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<UEPP_QycsywDto>(result.ProjectToQueryable<UEPP_QycsywDto>(), pageindex, pagesize);
	    }

	   public virtual void DeleteUEPP_Qycsyw(int id)
	    {
		 _UEPP_QycsywRepository.Delete(id);
		   }

  public virtual void AddUEPP_Qyjbxx(UEPP_QyjbxxDto UEPP_Qyjbxx)
  {
      Domain.UEPP_Qyjbxx model = AutoMapper.Mapper.Map<Domain.UEPP_Qyjbxx>(UEPP_Qyjbxx);
      _UEPP_QyjbxxRepository.Insert(model);
  }
   public virtual void UpdateUEPP_Qyjbxx(UEPP_QyjbxxDto UEPP_Qyjbxx)
  {
      Domain.UEPP_Qyjbxx model = AutoMapper.Mapper.Map<Domain.UEPP_Qyjbxx>(UEPP_Qyjbxx);
      _UEPP_QyjbxxRepository.Update(model);
  }

     public virtual UEPP_QyjbxxDto GetUEPP_QyjbxxById(int id)
	  {
	      return _UEPP_QyjbxxRepository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<UEPP_QyjbxxDto>();
	    }

		  public virtual List<UEPP_QyjbxxDto> GetUEPP_QyjbxxList(int? hotelid)
	  {
	    var result = _UEPP_QyjbxxRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<UEPP_QyjbxxDto>();
	    }

	  public virtual IPagedList<UEPP_QyjbxxDto> GetUEPP_QyjbxxList(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _UEPP_QyjbxxRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<UEPP_QyjbxxDto>(result.ProjectToQueryable<UEPP_QyjbxxDto>(), pageindex, pagesize);
	    }

	   public virtual void DeleteUEPP_Qyjbxx(int id)
	    {
		 _UEPP_QyjbxxRepository.Delete(id);
		   }

  public virtual void AddUEPP_QyRy(UEPP_QyRyDto UEPP_QyRy)
  {
      Domain.UEPP_QyRy model = AutoMapper.Mapper.Map<Domain.UEPP_QyRy>(UEPP_QyRy);
      _UEPP_QyRyRepository.Insert(model);
  }
   public virtual void UpdateUEPP_QyRy(UEPP_QyRyDto UEPP_QyRy)
  {
      Domain.UEPP_QyRy model = AutoMapper.Mapper.Map<Domain.UEPP_QyRy>(UEPP_QyRy);
      _UEPP_QyRyRepository.Update(model);
  }

     public virtual UEPP_QyRyDto GetUEPP_QyRyById(int id)
	  {
	      return _UEPP_QyRyRepository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<UEPP_QyRyDto>();
	    }

		  public virtual List<UEPP_QyRyDto> GetUEPP_QyRyList(int? hotelid)
	  {
	    var result = _UEPP_QyRyRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<UEPP_QyRyDto>();
	    }

	  public virtual IPagedList<UEPP_QyRyDto> GetUEPP_QyRyList(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _UEPP_QyRyRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<UEPP_QyRyDto>(result.ProjectToQueryable<UEPP_QyRyDto>(), pageindex, pagesize);
	    }

	   public virtual void DeleteUEPP_QyRy(int id)
	    {
		 _UEPP_QyRyRepository.Delete(id);
		   }

  public virtual void AddUEPP_Ryjbxx(UEPP_RyjbxxDto UEPP_Ryjbxx)
  {
      Domain.UEPP_Ryjbxx model = AutoMapper.Mapper.Map<Domain.UEPP_Ryjbxx>(UEPP_Ryjbxx);
      _UEPP_RyjbxxRepository.Insert(model);
  }
   public virtual void UpdateUEPP_Ryjbxx(UEPP_RyjbxxDto UEPP_Ryjbxx)
  {
      Domain.UEPP_Ryjbxx model = AutoMapper.Mapper.Map<Domain.UEPP_Ryjbxx>(UEPP_Ryjbxx);
      _UEPP_RyjbxxRepository.Update(model);
  }

     public virtual UEPP_RyjbxxDto GetUEPP_RyjbxxById(int id)
	  {
	      return _UEPP_RyjbxxRepository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<UEPP_RyjbxxDto>();
	    }

		  public virtual List<UEPP_RyjbxxDto> GetUEPP_RyjbxxList(int? hotelid)
	  {
	    var result = _UEPP_RyjbxxRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<UEPP_RyjbxxDto>();
	    }

	  public virtual IPagedList<UEPP_RyjbxxDto> GetUEPP_RyjbxxList(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _UEPP_RyjbxxRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<UEPP_RyjbxxDto>(result.ProjectToQueryable<UEPP_RyjbxxDto>(), pageindex, pagesize);
	    }

	   public virtual void DeleteUEPP_Ryjbxx(int id)
	    {
		 _UEPP_RyjbxxRepository.Delete(id);
		   }

  public virtual void AddUserInfo(UserInfoDto UserInfo)
  {
      Domain.UserInfo model = AutoMapper.Mapper.Map<Domain.UserInfo>(UserInfo);
      _UserInfoRepository.Insert(model);
  }
   public virtual void UpdateUserInfo(UserInfoDto UserInfo)
  {
      Domain.UserInfo model = AutoMapper.Mapper.Map<Domain.UserInfo>(UserInfo);
      _UserInfoRepository.Update(model);
  }

     public virtual UserInfoDto GetUserInfoById(int id)
	  {
	      return _UserInfoRepository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<UserInfoDto>();
	    }

		  public virtual List<UserInfoDto> GetUserInfoList(int? hotelid)
	  {
	    var result = _UserInfoRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<UserInfoDto>();
	    }

	  public virtual IPagedList<UserInfoDto> GetUserInfoList(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _UserInfoRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<UserInfoDto>(result.ProjectToQueryable<UserInfoDto>(), pageindex, pagesize);
	    }

	   public virtual void DeleteUserInfo(int id)
	    {
		 _UserInfoRepository.Delete(id);
		   }

  public virtual void Addwdecolinf(wdecolinfDto wdecolinf)
  {
      Domain.wdecolinf model = AutoMapper.Mapper.Map<Domain.wdecolinf>(wdecolinf);
      _wdecolinfRepository.Insert(model);
  }
   public virtual void Updatewdecolinf(wdecolinfDto wdecolinf)
  {
      Domain.wdecolinf model = AutoMapper.Mapper.Map<Domain.wdecolinf>(wdecolinf);
      _wdecolinfRepository.Update(model);
  }

     public virtual wdecolinfDto GetwdecolinfById(int id)
	  {
	      return _wdecolinfRepository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<wdecolinfDto>();
	    }

		  public virtual List<wdecolinfDto> GetwdecolinfList(int? hotelid)
	  {
	    var result = _wdecolinfRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<wdecolinfDto>();
	    }

	  public virtual IPagedList<wdecolinfDto> GetwdecolinfList(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _wdecolinfRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<wdecolinfDto>(result.ProjectToQueryable<wdecolinfDto>(), pageindex, pagesize);
	    }

	   public virtual void Deletewdecolinf(int id)
	    {
		 _wdecolinfRepository.Delete(id);
		   }

  public virtual void Addwdetabinf(wdetabinfDto wdetabinf)
  {
      Domain.wdetabinf model = AutoMapper.Mapper.Map<Domain.wdetabinf>(wdetabinf);
      _wdetabinfRepository.Insert(model);
  }
   public virtual void Updatewdetabinf(wdetabinfDto wdetabinf)
  {
      Domain.wdetabinf model = AutoMapper.Mapper.Map<Domain.wdetabinf>(wdetabinf);
      _wdetabinfRepository.Update(model);
  }

     public virtual wdetabinfDto GetwdetabinfById(int id)
	  {
	      return _wdetabinfRepository.TableNoTracking.Where(s => s.Id == id).ProjectToFirstOrDefault<wdetabinfDto>();
	    }

		  public virtual List<wdetabinfDto> GetwdetabinfList(int? hotelid)
	  {
	    var result = _wdetabinfRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return result.ProjectToList<wdetabinfDto>();
	    }

	  public virtual IPagedList<wdetabinfDto> GetwdetabinfList(int? hotelid,int pageindex, int pagesize)
	  {
	    var result = _wdetabinfRepository.TableNoTracking;
		  if(hotelid.HasValue)
		      result = result.Where(s=>s.hotelid == hotelid);
		return new PagedList<wdetabinfDto>(result.ProjectToQueryable<wdetabinfDto>(), pageindex, pagesize);
	    }

	   public virtual void Deletewdetabinf(int id)
	    {
		 _wdetabinfRepository.Delete(id);
		   }


